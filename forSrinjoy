def convertTDA(fileType="perceptionTest"):
    for subj in range(1, 6):
        # get the number of runs
        m1 = masker.maskSubject(subj, "VC")
        fileMatches = [int(f[-2:]) for f in os.listdir("fMRIFullData/sub-0" + str(subj) + "/")
                       if re.match("ses-" + fileType + "*", f)]
        runNum = max(fileMatches)
        for run in range(1, runNum + 1):
            # get the number of trials
            fileMatches = [int(f[-14:-12]) for f in
                           os.listdir("fMRIFullData/sub-0" + str(subj) + "/ses-" + fileType + "0"
                                      + str(run) + "/func/")
                           if re.match(
                    "sub-0" + str(subj) +
                    "_ses-" + fileType + "0" + str(run) +
                    "_task-perception_run-0*", f)]
            trialNum = max(fileMatches)
            for trial in range(1, trialNum + 1):
                # set-up a pickle string
                pickleString = ("subject_" + str(subj) + "_" + fileType + "_run_" + str(run) + "_trial_" + str(trial) +
                                "_VC.pickle")
                print("Running ", pickleString)

                # read and convert the given nii.gz file with mask passing in the events as labels
                # open data
                data = loader.loaderSpecific(subj, 2, run, trial)
                # cutoff the first few timepoints that are only rest, same with the last few
                data = data[:, :, :, 10:(data.shape[3] - 3)]
                # fit rips and object with labels for class
                events = pd.read_csv("fMRIFullData/sub-0" + str(subj) +
                                     "/ses-" + fileType + "0" + str(run) +
                                     "/func/sub-0" + str(subj) +
                                     "_ses-" + fileType + "0" + str(run) +
                                     "_task-perception_run-%02i" % trial + "_events.tsv", sep='\t')
                tf = TopologicalfMRI(data, np.array(events['stimulus_name'][1:(events['stimulus_name'].shape[0] - 1)]),
                                     m1, nTime=3, keepRange=(0, 2),
                                     saveMask=False)

                # tf.setLabels(np.array(events['stimulus_name'][1:(events['stimulus_name'].shape[0] - 1)]))
                print(tf._labels)  # confirm labels are correct

                # write the pickle file in top directory
                with open(pickleString, "wb") as f:
                    pickle.dump(tf, f)
